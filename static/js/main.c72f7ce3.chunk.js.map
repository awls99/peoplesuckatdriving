{"version":3,"sources":["SmugText.js","Numbers.js","serviceWorker.js","index.js"],"names":["Smug","texts","react_default","a","createElement","Math","floor","random","length","Numbers","_useState","useState","_useState2","Object","slicedToArray","deaths","setDeaths","_useState3","_useState4","injured","setInjured","_useState5","_useState6","smugText","setSmugText","useEffect","interval","setInterval","elapsed","parseInt","Date","now","startTime","newDeaths","round","deathsPerSecond","newInjured","injuredOrDisabledPerSecond","clearInterval","deathsPerYear","injuredOrDisabledPerYear","id","style","textAlign","href","Boolean","window","location","hostname","match","ReactDOM","render","src_Numbers","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wKAeeA,MAbf,WACE,IAAMC,EAAQ,CACZ,0FACA,sFACA,2DAGF,OACEC,EAAAC,EAAAC,cAAA,SAAIH,EAAMI,KAAKC,MAAMD,KAAKE,SAASN,EAAMO,WC6C9BC,MAnDf,WAAoB,IAAAC,EACUC,mBAAS,GADnBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACXK,EADWH,EAAA,GACHI,EADGJ,EAAA,GAAAK,EAEYN,mBAAS,GAFrBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEXE,EAFWD,EAAA,GAEFE,EAFEF,EAAA,GAAAG,EAGcV,mBAASX,KAHvBsB,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGXE,EAHWD,EAAA,GAGDE,EAHCF,EAAA,GAMlBG,oBAAU,WACN,IAAMC,EAAWC,YAAY,WAC3B,IACIC,EADMC,SAASC,KAAKC,MAAQ,KACZC,EAChBC,EAAY5B,KAAK6B,MAAOC,EAAkBP,GAC9CZ,EAAUiB,GACV,IAAIG,EAAa/B,KAAK6B,MAAMG,EAA6BT,GACzDR,EAAWgB,IACV,KAEH,OAAO,WACLE,cAAcZ,KAEf,IAELD,oBAAU,WACN,IAAMC,EAAWC,YAAY,WAC3BH,EAAYxB,MACX,KAEH,OAAO,WACLsC,cAAcZ,KAEf,IAEL,IACMS,EAAkBI,mBAElBF,EAA6BG,kBAC7BR,EAAYH,SAASC,KAAKC,MAAQ,KAExC,OACE7B,EAAAC,EAAAC,cAAA,OAAKqC,GAAG,UAAUC,MAAO,CAACC,UAAY,WACpCzC,EAAAC,EAAAC,cAAA,2CAAmCW,EAAnC,sBACAb,EAAAC,EAAAC,cAAA,mBAAWe,EAAX,+DACAjB,EAAAC,EAAAC,cAAA,4FACCmB,EACDrB,EAAAC,EAAAC,cAAA,mBAAUF,EAAAC,EAAAC,cAAA,KAAGwC,KAAK,iGAAR,yBACV1C,EAAAC,EAAAC,cAAA,WAASF,EAAAC,EAAAC,cAAA,qBAAYF,EAAAC,EAAAC,cAAA,KAAGwC,KAAK,wDAAR,oBCpCPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAAaC,SAASC,eAAe,SD2H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c72f7ce3.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Smug() {\n  const texts = [\n    \"But yeah... let's keep arguing about who will pay for insurance on self driving cars...\",\n    \"But 4 people died in over 210 million driven KM's on self driven cars, it's unsafe!\",\n    \"But the troley problem needs to be argued ad infinitum.\"\n  ]\n\n  return(\n    <p>{texts[Math.floor(Math.random()*texts.length)]}</p>\n  );\n\n}\n\nexport default Smug;\n","import React, { useState,useEffect } from 'react';\nimport Smug from './SmugText';\n\n\nfunction Numbers()  {\n  const [deaths, setDeaths] = useState(0);\n  const [injured, setInjured] = useState(0);\n  const [smugText, setSmugText] = useState(Smug());\n\n\n  useEffect(() => {\n      const interval = setInterval(() => {\n        let now = parseInt(Date.now() / 1000 );\n        let elapsed = now - startTime;\n        let newDeaths = Math.round( deathsPerSecond * elapsed );\n        setDeaths(newDeaths);\n        let newInjured = Math.round(injuredOrDisabledPerSecond * elapsed )\n        setInjured(newInjured);\n      }, 1000);\n\n      return () => {\n        clearInterval(interval);\n      };\n    }, []);\n\n  useEffect(() => {\n      const interval = setInterval(() => {\n        setSmugText(Smug())\n      }, 10000);\n\n      return () => {\n        clearInterval(interval);\n      };\n    }, []);\n\n  const deathsPerYear = 1350000; // 1 per 24 secs as of 2018\n  const deathsPerSecond = deathsPerYear/365/24/60/60;\n  const injuredOrDisabledPerYear = 35000000; //20-50M per year, so rounding a bit\n  const injuredOrDisabledPerSecond = injuredOrDisabledPerYear/365/24/60/60*24;\n  const startTime = parseInt(Date.now() / 1000 )\n\n  return (\n    <div id=\"numbers\" style={{\"textAlign\":\"center\"}}>\n      <h1>Since you've opened this page {deaths} people have died!</h1>\n      <h2>Also, {injured} people have been injured or straight up became disabled...</h2>\n      <h3>Car accidents are the number 1 cause of death among children and young adults.</h3>\n      {smugText}\n      <cite>WHO <a href=\"https://www.who.int/violence_injury_prevention/road_safety_status/2018/infographicEN.pdf?ua=1\">Infographic for 2018</a></cite>\n      <br></br><cite>ASIRT <a href=\"https://www.asirt.org/safe-travel/road-safety-facts/\">Data for 2018</a></cite>\n\n    </div>\n  );\n\n}\n\nexport default Numbers;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Numbers from './Numbers';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Numbers />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}